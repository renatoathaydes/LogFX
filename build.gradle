import groovy.text.SimpleTemplateEngine
import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id 'groovy'
    id 'application'
    id 'maven-publish'
    id 'signing'
    id 'org.javamodularity.moduleplugin' version '1.7.0'
}

group 'com.athaydes.logfx'
version '1.0-RC15'
description 'A beautiful log viewer capable of handling large files'

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

mainClassName = "com.athaydes.logfx/com.athaydes.logfx.LogFX"

repositories {
    mavenCentral()
}

tasks.withType( JavaCompile ) {
    options.encoding = 'UTF-8'
}

def libs = "${buildDir}/libs"
def image = "${buildDir}/image"
ext.splashImage = "${image}/bin/logfx-logo"

task deps( type: Copy ) {
    from configurations.runtimeClasspath
    into libs
}

task copyShellScriptToImage( type: Copy ) {
    from "src/main/sh/logfx${Os.isFamily( Os.FAMILY_WINDOWS ) ? '.bat' : ''}"
    into "$image/bin"
}

task jlink( type: Exec ) {
    dependsOn jar, deps
    finalizedBy copyShellScriptToImage, project( ':splash-maker' ).tasks.withType( JavaExec )
    inputs.files( sourceSets*.allSource )
    outputs.dir( image )
    def options = [
            '--module-path', libs,
            '--vm=server', // options: client|server|minimal|all
            '--add-modules', 'java.base,java.desktop,javafx.controls,jdk.unsupported,jdk.crypto.ec,org.slf4j,' +
                    'com.athaydes.logfx',
            '--output', image,
            '--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages' ]
    def jlink = System.getProperty( 'java.home' ) + '/bin/jlink'
    commandLine( [ jlink ] + options )
    doFirst { new File( image ).deleteDir() }
}

task packageImage( type: Zip ) {
    outputs.upToDateWhen { false }
    dependsOn jlink, copyShellScriptToImage
    from image
    into "logfx"
    include '**/*'
    archiveName "logfx-${project.version}.zip"
    destinationDir buildDir
}

task jpackage( type: Exec ) {
    dependsOn jlink
    def osOptions = Os.isFamily( Os.FAMILY_WINDOWS )
            ? [ '--win-per-user-install',
                '--win-dir-chooser',
                '--win-menu',
                '--win-shortcut',
                '--icon', 'src/main/resources/com/athaydes/logfx/images/favicon-small.png' ]
            : Os.isFamily( Os.FAMILY_MAC )
            ? [
            '--icon', 'src/main/resources/com/athaydes/logfx/images/favicon-small.png' ]
            : [ '--linux-menu-group', 'programming',
                '--linux-deb-maintainer', 'renato@athaydes.com',
                '--linux-rpm-license-type', 'GPLv3',
                '--linux-shortcut' ]
    def options = osOptions + [
            '--name', 'logfx',
            '--app-image', image,
            '--app-version', project.version,
            '--copyright', 'Copyright 2017-2020 Renato Athaydes',
            '--description', project.description,
            '--type', 'deb',
            '--vendor', 'Renato Athades',
            '--license-file', 'LICENSE',
            '--dest', buildDir ]
    def jpackage = System.getProperty( 'java.home' ) + '/bin/jpackage'
    commandLine( [ jpackage ] + options )
}

// waiting for bug fix: https://github.com/java9-modularity/gradle-modules-plugin/issues/111
//final generatedJavaSources = "$buildDir/java-generated-sources"

//sourceSets.main.java.srcDir generatedJavaSources

configurations {
    binaries
}

dependencies {
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.8.0-beta4'

    testImplementation group: 'org.codehaus.groovy', name: 'groovy-all', version: '3.0.8'
    testImplementation group: 'org.spockframework', name: 'spock-core', version: '2.0-groovy-3.0', {
        transitive = false
    }
    testImplementation group: 'com.athaydes', name: 'spock-reports', version: '2.0-groovy-3.0', {
        transitive = false
    }
    testImplementation group: 'junit', name: 'junit', version: '4.13.2'
    testImplementation group: 'cglib', name: 'cglib-nodep', version: '3.3.0'
    testImplementation group: 'com.google.code.tempus-fugit', name: 'tempus-fugit', version: '1.1'
}

test {
    systemProperty 'logfx.log.target', 'sysout'
    systemProperty 'logfx.log.level', 'info'
    systemProperty 'com.athaydes.spockframework.report.showCodeBlocks', 'true'

    useJUnit()

    moduleOptions {
        runOnClasspath = true
    }

    reports {
        junitXml.enabled( true )
    }
}

task generateJavaSources(
        description: 'Generates Java sources based on the java-templates directory' ) {
    def properties = [ logfxVersion: version ]
    def templates = fileTree( dir: 'src/main/java-templates' )
//    def destination = file( generatedJavaSources )
    def destination = file( 'src/main/java' )

    doLast {
        templates.visit { item ->
            def file = item.file
            if ( file.isFile() ) {
                def transformedTemplate = new SimpleTemplateEngine().createTemplate( file ).make( properties )
                new File( destination, item.relativePath.toString() ).withWriter {
                    transformedTemplate.writeTo it
                }
            } else {
                new File( destination, item.relativePath.toString() ).mkdirs()
            }
        }
    }
}

compileJava.dependsOn generateJavaSources

task fatJar( type: Jar ) {
    manifest {
        attributes 'Implementation-Title': 'LogFX',
                'Implementation-Version': project.version,
                'Implementation-Vendor': 'Renato Athaydes',
                'Main-Class': 'com.athaydes.logfx.LogFX'
    }
    destinationDirectory = buildDir
    classifier "all"
    from {
        configurations.runtimeClasspath.collect {
            if ( it.isDirectory() ) return it
            zipTree( it ).matching {
                // Licenses are acknowledged in our own license file
                exclude 'META-INF/LICENSE'
            }
        }
    }
    // include META-INF/services for logging to work in non-modular setup
    from file( 'splash-maker/src/main/resources' )
    with jar
}

/* Publishing config */

jar {
    manifest {
        attributes(
                "Implementation-Title": "LogFX",
                "Implementation-Version": version )
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

test {
    useJUnitPlatform()
}

javadoc {
    if ( JavaVersion.current().isJava9Compatible() ) {
        options.addBooleanOption( 'html5', true )
    }
}

def getProjectProperty = { String propertyName ->
    project.properties[ propertyName ]
}

publishing {
    publications {
        mavenJava( MavenPublication ) {
            artifactId = 'logfx'
            from components.java
            pom {
                inceptionYear = '2017'
                name = project.name
                description = project.description
                url = 'https://github.com/renatoathaydes/LogFX'

                scm {
                    connection = 'git@github.com:renatoathaydes/LogFX.git'
                    developerConnection = 'git@github.com:renatoathaydes/LogFX.git'
                    url = 'https://github.com/renatoathaydes/LogFX'
                }

                licenses {
                    license {
                        name = 'GNU General Public License (version 3.0)'
                        url = 'https://www.gnu.org/licenses/gpl-3.0.txt'
                    }
                }

                developers {
                    developer {
                        id = 'renatoathaydes'
                        name = 'Renato Athaydes'
                        email = 'renato@athaydes.com'
                    }
                }
            }
        }
    }
    repositories {
        maven {
            url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            credentials {
                username getProjectProperty( 'ossrhUsername' )?.toString()
                password getProjectProperty( 'ossrhPassword' )?.toString()
            }
        }
    }
}

signing {
    if ( project.hasProperty( 'sign' ) ) {
        sign publishing.publications.mavenJava
    }
}
